rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;

      allow update: if request.auth != null &&
      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friendSuggestionsBlacklist']) &&
      (
        // Editing own profile (full control)
        request.auth.uid == userId ||

        // Editing someone else's blacklist â€” only to add or remove YOURSELF
        (
          request.auth.uid != userId &&

          (
            // CASE 1: You're ADDING yourself to THEIR blacklist
            (
              !resource.data.friendSuggestionsBlacklist.hasAny([request.auth.uid]) &&
              request.resource.data.friendSuggestionsBlacklist.hasAny([request.auth.uid]) &&
              request.resource.data.friendSuggestionsBlacklist.size() > resource.data.friendSuggestionsBlacklist.size()
            )
            ||

            // CASE 2: You're REMOVING yourself from THEIR blacklist
            (
              resource.data.friendSuggestionsBlacklist.hasAny([request.auth.uid]) &&
              !request.resource.data.friendSuggestionsBlacklist.hasAny([request.auth.uid]) &&
              request.resource.data.friendSuggestionsBlacklist.size() < resource.data.friendSuggestionsBlacklist.size()
            )
          )
        )
      );



      match /friendRequests/{requestId} {
        allow create: if request.auth != null && request.auth.uid == requestId;
        allow get, list, update, delete: if request.auth != null && request.auth.uid == userId;
      }

      match /sentFriendRequests/{requestId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        allow delete: if request.auth != null && requestId == request.auth.uid;
      }
      
      match /friends/{friendId} {
        allow create, delete: if request.auth != null && request.auth.uid == friendId;
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

    
       // Messages previews
      match /messagesPreview/{id} {
      	allow read: if request.auth != null && request.auth.uid == userId
        allow create, update, delete: if request.auth != null
          // requester is in the chat
          && get(/databases/$(database)/documents/chats/$(id)).data.members[request.auth.uid] != null
          // target user (userId from parent) is also in the chat
          && get(/databases/$(database)/documents/chats/$(id)).data.members[userId] != null
          
        
      }
    }

    match /chats/{chatId} {
      allow read: if request.auth != null && resource.data.members[request.auth.uid] != null;
      allow create: if request.auth != null && request.resource.data.members[request.auth.uid] != null;
      allow update, delete: if request.auth != null && resource.data.members[request.auth.uid] != null;

      match /messages/{messageId} {
        allow read, create, update, delete: if request.auth != null &&
          get(/databases/$(database)/documents/chats/$(chatId)).data.members[request.auth.uid] != null;
      }
    }
  }
}
